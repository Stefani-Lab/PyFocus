:mod:`PyFocus.sim`
==================

.. py:module:: PyFocus.sim

.. autoapi-nested-parse::

   Created on Thu Jun  3 11:51:24 2021

   @author: ferchi



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   PyFocus.sim.VPP
   PyFocus.sim.no_mask
   PyFocus.sim.custom



.. function:: VPP(propagation=False, interface=False, NA=1.4, n=1.5, h=3, f=3.21, w0=5, wavelength=640, gamma=45, beta=90, zp0=0, rsteps=5, zsteps=8, field_of_view=1000, z_field_of_view=2000, I0=1, L='', R='', ds='', zint='', figure_name='')

   Simulate the field obtained by focusing a gaussian beam modulated by a VPP mask 

   Returns ex_XZ,ey_XZ,ez_XZ,ex_XY,ey_XY,ez_XY, each one is a matrix with the amplitude of each cartesian component on the XZ plane (ex_XZ,ey_XZ,ez_XZ) or on the XY plane (ex_XY,ey_XY,ez_XY)

   Each index of the matrixes corresponds to a different pair of coordinates, for example: 
   ex_XZ[z,x] with z each index of the coordinates np.linspace(z_field_of_view/2,-z_field_of_view/2,2*int(z_field_of_view/zsteps/2)) and x each index for np.linspace(-field_of_view/2**0.5,field_of_view/2**0.5,2*int(field_of_view/rsteps/2**0.5)) in which the field is calculated
   ex_XZ[y,x2] with y each index of the coordinates np.linspace(field_of_view/2,-field_of_view/2,2*int(field_of_view/rsteps/2)) and x each index for np.linspace(-field_of_view/2,field_of_view/2,2*int(field_of_view/rsteps/2)) in which the field is calculated

   The XZ plane is given by y=0 and the XZ plane by z=zp0 

   The radial field of view in the XZ plane is sqrt(2) times bigger to allow a square field of view for the XY plane (the maximum radial position is higher than the maximum x or y position)

   propagation=True calculates and plots the field inciding on the lens by fraunhofer's difractin formula, in which case R and L are needed
   propagation=False calculates the field inciding on the lens depreciating the propagation

   interface=True calculates the field with an interface present in the path, in which case ds and z_int are needed
   interface=Flase calculates the field obtained without an interface

   Parameters: 
   NA: numerical aperture
   n: refraction medium for the optical system. If interface=True it must be given as a numpy array
   h: radius of aperture (mm)
   f: focal distance (mm)
   w0: incident gaussian beam radius (mm)
   wavelength: wavelength in the medium (equals wavelength in vacuum/n)
   gamma: parameter that determines the polarization, arctan(ey/ex) (gamma=45, beta=90 gives right circular polarization and a donut shape)
   beta: parameter that determines the polarization, phase difference between ex and ey (gamma=45, beta=90 gives right circular polarization and a donut shape)
   zp0: Axial position in which to calculate the XY plane (given by z=zp0)
   rsteps: resolution in the x or y coordinate (nm)
   zsteps: resolution in the axial coordinate,z (nm)
   field_of_view: field of view in the x or y coordinate in which the field is calculated (nm)
   z_field_of_view: field of view in the axial coordinate, z, in which the field is calculated (nm)
   I_0: Incident field intensity (kW/cm^2)
   L: distance between phase mask and objective lens (mm), only used if propagation=True
   R: phase mask radius (mm), only used if propagation=True
   ds: thickness of each interface in the multilayer system (nm), must be given as a numpy array with the first and last values a np.inf. Only used if interface=True
   zint: axial position of the interphase. Only used if interface=True
   figure_name: name for the images of the field. Also used as saving name if using the UI


.. function:: no_mask(propagation=False, interface=False, NA=1.4, n=1.5, h=3, f=3.21, w0=5, wavelength=640, gamma=45, beta=90, zp0=0, rsteps=5, zsteps=8, field_of_view=1000, z_field_of_view=2000, I0=1, L='', R='', ds='', zint='', figure_name='')

   Simulate the field obtained by focusing a gaussian beam without being modulated in phase
   Since there is no phase mask, propagation is not a parameter

   Returns ex_XZ,ey_XZ,ez_XZ,ex_XY,ey_XY,ez_XY, each one is a matrix with the amplitude of each cartesian component on the XZ plane (ex_XZ,ey_XZ,ez_XZ) or on the XY plane (ex_XY,ey_XY,ez_XY)

   Each index of the matrixes corresponds to a different pair of coordinates, for example: 
   ex_XZ[z,x] with z each index of the coordinates np.linspace(z_field_of_view/2,-z_field_of_view/2,2*int(z_field_of_view/zsteps/2)) and x each index for np.linspace(-field_of_view/2**0.5,field_of_view/2**0.5,2*int(field_of_view/rsteps/2**0.5)) in which the field is calculated
   ex_XZ[y,x2] with y each index of the coordinates np.linspace(field_of_view/2,-field_of_view/2,2*int(field_of_view/rsteps/2)) and x each index for np.linspace(-field_of_view/2,field_of_view/2,2*int(field_of_view/rsteps/2)) in which the field is calculated

   The XZ plane is given by y=0 and the XZ plane by z=zp0 

   The radial field of view in the XZ plane is sqrt(2) times bigger to allow a square field of view for the XY plane (the maximum radial position is higher than the maximum x or y position)

   propagation=True calculates and plots the field inciding on the lens by fraunhofer's difractin formula, in which case R and L are needed
   propagation=False calculates the field inciding on the lens depreciating the propagation

   interface=True calculates the field with an interface present in the path, in which case ds and z_int are needed
   interface=Flase calculates the field obtained without an interface

   Parameters: 
   NA: numerical aperture
   n: refraction medium for the optical system. If interface=True it must be given as a numpy array
   h: radius of aperture (mm)
   f: focal distance (mm)
   w0: incident gaussian beam radius (mm)
   wavelength: wavelength in the medium (equals wavelength in vacuum/n)
   gamma: parameter that determines the polarization, arctan(ey/ex) (gamma=45, beta=90 gives right circular polarization and a donut shape)
   beta: parameter that determines the polarization, phase difference between ex and ey (gamma=45, beta=90 gives right circular polarization and a donut shape)
   zp0: Axial position in which to calculate the XY plane (given by z=zp0)
   rsteps: resolution in the x or y coordinate (nm)
   zsteps: resolution in the axial coordinate,z (nm)
   field_of_view: field of view in the x or y coordinate in which the field is calculated (nm)
   z_field_of_view: field of view in the axial coordinate, z, in which the field is calculated (nm)
   I_0: Incident field intensity (kW/cm^2)
   L: distance between phase mask and objective lens (mm), only used if propagation=True
   R: phase mask radius (mm), only used if propagation=True
   ds: thickness of each interface in the multilayer system (nm), must be given as a numpy array with the first and last values a np.inf. Only used if interface=True
   zint: axial position of the interphase. Only used if interface=True
   figure_name: name for the images of the field. Also used as saving name if using the UI


.. function:: custom(mask_function, propagation=False, interface=False, NA=1.4, n=1.5, h=3, f=3.21, w0=5, wavelength=640, gamma=45, beta=90, zp0=0, rsteps=5, zsteps=8, field_of_view=1000, z_field_of_view=2000, I0=1, L='', R='', ds='', zint='', figure_name='', resolution_theta=200, resolution_phi=200)

   Simulate the field obtained by focusing a gaussian beam modulated by a custom phase mask
   The amplitude term of a gaussian beam is already multiplyed to the integral despite the phase mask used, if this is not desired w0=100 (a big number) makes this term essentially 1

   Returns ex_XZ,ey_XZ,ez_XZ,ex_XY,ey_XY,ez_XY, each one is a matrix with the amplitude of each cartesian component on the XZ plane (ex_XZ,ey_XZ,ez_XZ) or on the XY plane (ex_XY,ey_XY,ez_XY)

   Each index of the matrixes corresponds to a different pair of coordinates, for example: 
   ex_XZ[z,x] with z each index of the coordinates np.linspace(z_field_of_view/2,-z_field_of_view/2,2*int(z_field_of_view/zsteps/2)) and x each index for np.linspace(-field_of_view/2**0.5,field_of_view/2**0.5,2*int(field_of_view/rsteps/2**0.5)) in which the field is calculated
   ex_XZ[y,x2] with y each index of the coordinates np.linspace(field_of_view/2,-field_of_view/2,2*int(field_of_view/rsteps/2)) and x each index for np.linspace(-field_of_view/2,field_of_view/2,2*int(field_of_view/rsteps/2)) in which the field is calculated

   The XZ plane is given by y=0 and the XZ plane by z=zp0 

   The radial field of view in the XZ plane is sqrt(2) times bigger to allow a square field of view for the XY plane (the maximum radial position is higher than the maximum x or y position)

   propagation=True calculates and plots the field inciding on the lens by fraunhofer's difractin formula, in which case R and L are needed
   propagation=False calculates the field inciding on the lens depreciating the propagation

   interface=True calculates the field with an interface present in the path, in which case ds and z_int are needed
   interface=Flase calculates the field obtained without an interface

   Parameters: 
   mask_function: custom mask's description, the real part defines the incident field's amplitude and the complex part the phase. Can be given as a function or as a matrix. For this last case each value of the matrix is given by a coordinate for theta and phi: mask_function[phi_position,theta_position]
   for phi_position an index from np.linspace(0,2*np.pi,resolution_phi) and theta_position an index from np.linspace(0,alpha,resolution_theta). With resolution_phi and resolution_theta 2 integers that ill define the resolution of the 2D integration (and also how long it takes)
   NA: numerical aperture
   n: refraction medium for the optical system. If interface=True it must be given as a numpy array
   h: radius of aperture (mm)
   f: focal distance (mm)
   w0: incident gaussian beam radius (mm)
   wavelength: wavelength in the medium (equals wavelength in vacuum/n)
   gamma: parameter that determines the polarization, arctan(ey/ex) (gamma=45, beta=90 gives right circular polarization and a donut shape)
   beta: parameter that determines the polarization, phase difference between ex and ey (gamma=45, beta=90 gives right circular polarization and a donut shape)
   zp0: Axial position in which to calculate the XY plane (given by z=zp0)
   rsteps: resolution in the x or y coordinate (nm)
   zsteps: resolution in the axial coordinate,z (nm)
   field_of_view: field of view in the x or y coordinate in which the field is calculated (nm)
   z_field_of_view: field of view in the axial coordinate, z, in which the field is calculated (nm)
   I_0: Incident field intensity (kW/cm^2)
   L: distance between phase mask and objective lens (mm), only used if propagation=True
   R: phase mask radius (mm), only used if propagation=True
   ds: thickness of each interface in the multilayer system (nm), must be given as a numpy array with the first and last values a np.inf. Only used if interface=True
   zint: axial position of the interphase. Only used if interface=True
   figure_name: name for the images of the field. Also used as saving name if using the UI
   resolution_theta, resolution_phi: resolution for the 2D integration of the incident field for the theta and phi variables respectively, default is set to 200. Higher values ensure less error in the integratin but require higher integration times.

   Returns the ampitude of each component on the y=0 plane (XZ) and z=cte (XY) with the constant given by the user on ''axial distance from focus'', named on the code as zp0
   Returns the amplitude as ex_XZ,ey_XZ,ez_XZ,ex_XY,ey_XY,ez_XY with for example ex the amplitude matrix (each place of the matrix is a different spacial position) of the X component and XZ or XY the plane in which they where calculated


