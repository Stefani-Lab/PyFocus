:mod:`PyFocus.auxiliary.custom_mask_functions`
==============================================

.. py:module:: PyFocus.auxiliary.custom_mask_functions

.. autoapi-nested-parse::

   Created on Mon Jun 15 17:40:54 2020

   @author: Fer Caprile

   Functions for simulation of the diffraction obtained by an arbitrary phase mask



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   PyFocus.auxiliary.custom_mask_functions.generate_incident_field
   PyFocus.auxiliary.custom_mask_functions.plot_in_cartesian
   PyFocus.auxiliary.custom_mask_functions.custom_mask_objective_field
   PyFocus.auxiliary.custom_mask_functions.test_custom_mask_objective_field
   PyFocus.auxiliary.custom_mask_functions.custom_mask_focus_field_XY
   PyFocus.auxiliary.custom_mask_functions.custom_mask_focus_field_XZ_XY



.. function:: generate_incident_field(maskfunction, alpha, focus, resolution_phi, resolution_theta, gamma, beta, w0, I0, wavelength)

   Generate a matrix for the field X and Y direction of the incident field on the lens, given the respective maskfunction
   maskfunction: function that defines the phase mask. The real part also defines the incident field's amplitude
   resolution_phi,resolution_theta: number of divisions in the phi and theta coordinates to use the 2D integration for the calculation of the focused field

   The rest of the parameters are specified in sim.py

   This matrix has the value of the amplitude of the incident field for each value of theta and phi: ex_lens[phi_position,theta_position]
   for phi_position a alue in np.linspace(0,2*np.pi,resolution_phi) and theta_position a value in np.linspace(0,alpha,resolution_theta) 


.. function:: plot_in_cartesian(Ex, Ey, xmax, alpha, focus, figure_name)

   Plot the fields Ex and Ey, who are described in polar coordinates 


.. function:: custom_mask_objective_field(h, gamma, beta, resolution_theta, resolution_phi, N_rho, N_phi, alpha, focus, mask_function, R, L, I0, wavelength, w0, fig_name, plot=True)

   Calculate the inciding field on the objective by fraunhofer's difraction formula for a custom phase mask

   The resultant matrix Ex and Ey are returned in polar coordinates (each row is a different value of phi and each column a different rho)  

   N_rho and N_phi: the number of divisions for the 2D integral's calculus in rho and phi respectively, they are not coordinates in which the field is calculated
   resolution_theta,resolution_phi: number of divisions for the field indicent on the lens on the theta and phi coordinates respectively. This field is later used to calculate the focused field.
   The incident field is calculated in the coordinates:
   theta_values=np.linspace(0,alpha,resolution_theta)  #divisions of theta in which the trapezoidal 2D integration is done
   phip_values=np.linspace(0,2*np.pi,resolution_phi)   #divisions of phi in which the trapezoidal 2D integration is done
   by using sine's law this corresponds to the radial positions rhop_values=np.sin(theta_values)*focus

   The rest of the parameters are specified in sim.py


.. function:: test_custom_mask_objective_field(psi, delta, resolution_theta, resolution_phi, N_rho, N_phi, alpha, mask_function, h, L, I0, wavelength, w0, plot=True)

   Quick run for testing if the resolution used to do the 2D integration is high enought.
   Meant for difraction for an arbitrary phase mask under the paraxial approximation, using the GPU


.. function:: custom_mask_focus_field_XY(ex_lens, ey_lens, alpha, h, wavelength, zp0, resolution_focus, resolution_theta, resolution_phi, FOV_focus, countdown=True, x0=0, y0=0)

   2D integration to calculate the field at the focus of a high aperture lens
   ex_lens,ey_lens are the x and y component of the inciding field
   Calculates the field on the XY focal plane.

   resolution_focus: resolution for the field at the focus, the same for x and y
   resolution_theta,resolution_phi: resolution for the 2D calculus (must be the same as the size of ex_lens and ey_lens) 

   wavelength: wavelength (nm) in the medium (equals wavelength in vacuum/n) 
       
   x0 and y0 are used for centering the XY field at an x0, y0 position

   countdown=True means you are only running this fuction once and you want to see te time elapsed and expected to finish the calculation

   The rest of the parameters are specified in sim.py


.. function:: custom_mask_focus_field_XZ_XY(ex_lens, ey_lens, alpha, h, wavelength, z_FOV, resolution_z, zp0, resolution_focus, resolution_theta, resolution_phi, FOV_focus, x0=0, y0=0, plot_plane='X')

   2D integration to calculate the field at the focus of a high aperture lens
   ex_lens,ey_lens are the x and y component of the inciding field
   Calculates the field on the XY focal plane and the XZ plane.

   resolution_focus is the resolution for the field at the focus, the same for x and y
   resolution_theta,resolution_phi is the resolution for the 2D calculus (must be the same as the sie of ex_lens and ey_lens) 

   wavelength is given in the medium (equals wavelength in vacuum/n)
   countdown=True means you are only running this fuction once and you want to see te time elapsed and expected to finish the calculation
           
   x0 and y0 are used for centering the XY field at an x0, y0 position

   The rest of the parameters are specified in sim.py


